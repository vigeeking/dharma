--- 
  jobs: 
    deploy: 
      name: Deploy
      runs-on: ubuntu-latest
      steps: 
        - 
          name: Checkout
          uses: actions/checkout@v2
        - 
          name: "Configure AWS credentials"
          uses: aws-actions/configure-aws-credentials@v1
          with: 
            aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY_ID }}"
            aws-region: us-east-2
            aws-secret-access-key: "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        - 
          id: login-ecr
          name: "Login to Amazon ECR"
          uses: aws-actions/amazon-ecr-login@v1
        - 
          env: 
            ECR_REGISTRY: "${{ steps.login-ecr.outputs.registry }}"
            ECR_REPOSITORY: mattermost
            IMAGE_TAG: "${{ github.sha }}"
          id: build-image
          name: "Build, tag, and push image to Amazon ECR"
          run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        - 
          id: task-def
          name: "Fill in the new image ID in the Amazon ECS task definition"
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with: 
            container-name: mattermost
            image: "${{ steps.build-image.outputs.image }}"
            task-definition: mattermost.json
        - 
          name: "Deploy Amazon ECS task definition"
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with: 
            cluster: vigeeking
            service: Mattermost-service
            task-definition: "${{ steps.task-def.outputs.task-definition }}"
            wait-for-service-stability: true
  name: "Deploy to Amazon ECS"
  true: 
    release: 
      types: 
        - created
  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
  with: 
    cluster: vigeeking
    codedeploy-application: my-codedeploy-application
    codedeploy-appspec: appspec.json
    codedeploy-deployment-group: my-codedeploy-deployment-group
    service: Mattermost-service
    task-definition: mattermost.json
    wait-for-service-stability: true
  